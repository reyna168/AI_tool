{
  "name": "Generate & Test SQL Code with GPT/OpenRouter AI and PostgreSQL Sandbox",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "mode": "webhook",
        "options": {}
      },
      "id": "47f2b3b4-12f0-4e9c-82f4-54d2c32b77f0",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        448,
        544
      ],
      "webhookId": "a889d2ae-2159-402f-b326-5f61e90f602e",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "jsCode": "\n\nreturn {\n  \"message\" : $input.last().json.message,\n  \"prompt\" : \"Recieved error while executing this query: \" + $input.last().json.message + \". Here detailed description: \" + $input.last().json.error.description + \". Please fix SQL query. Please decide how to solve and give fixed SQL query.\"\n}"
      },
      "id": "424b2831-425b-4ee7-a3d5-b2713bfdf343",
      "name": "GenerateErrorPrompt",
      "type": "n8n-nodes-base.code",
      "position": [
        6416,
        880
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('localVariables').last().json.sessionId }}",
        "contextWindowLength": 7
      },
      "id": "07f2f95a-0958-4562-b5c4-1bb6504a02fd",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        3312,
        832
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "loose"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "e938b602-e816-4409-9c0b-190eae7952df",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $('localVariables').last().json.autoErrorFixing }}",
              "rightValue": 1
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "7f42bf3b-5d99-41d4-94e7-0a34da39e285",
      "name": "AutoErrorFixing",
      "type": "n8n-nodes-base.if",
      "position": [
        5360,
        384
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "loose"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "3228bc02-986c-4159-bf24-b27336611473",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $('GenerateErrorPrompt').isExecuted }}",
              "rightValue": "true"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "6e1fcee6-2c63-46e3-a48c-458180257b43",
      "name": "IfError",
      "type": "n8n-nodes-base.if",
      "position": [
        5136,
        448
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.output }}",
        "options": {}
      },
      "id": "4f3fcdf7-fe96-4137-9356-165890ea57d1",
      "name": "Execute_AI_result",
      "type": "n8n-nodes-base.postgres",
      "position": [
        5888,
        592
      ],
      "typeVersion": 2.6,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "loose"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "cd96c88f-b4c7-4bb6-9082-b2a827740bea",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.output }}",
              "rightValue": "1"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "d4c60f3d-425e-4fef-923c-a2fa154f0a00",
      "name": "isAssistantExists",
      "type": "n8n-nodes-base.if",
      "position": [
        2368,
        -48
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "jsCode": "let isAssistantExists = 0;\nlet assistantId = null;\n\nfor (const item of $('getAssistantsList').all()) {\n  let trimmedGetAss = item.json.name ? item.json.name.trim() : '';\n  let trimmedAgentName = $(\"AgentName\").last().json.agentName.trim();\n  if (trimmedGetAss === trimmedAgentName) { \n    isAssistantExists = 1;\n    assistantId = $input.first().json.id;\n  }\n}\n\nreturn {output: isAssistantExists, id: assistantId};"
      },
      "id": "318a17bb-7566-4b2c-bd3f-d6e57daa1b95",
      "name": "isAssistantExistsCode",
      "type": "n8n-nodes-base.code",
      "position": [
        2080,
        -48
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "fddc112b-8a31-4098-b283-df9d0c7b0acf",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $('localVariables').last().json.aiProvider }}",
              "rightValue": "openai"
            }
          ]
        },
        "options": {}
      },
      "id": "ff979107-3937-4feb-aaf3-4ff9337325da",
      "name": "isOpenAI",
      "type": "n8n-nodes-base.if",
      "position": [
        6640,
        880
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1f6867fd-d7d1-45c5-b01f-960e4ce6c883",
              "name": "id",
              "type": "string",
              "value": "={{ $json.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "6e2a2dd7-8ca7-4662-9c7d-5c7cab0dd314",
      "name": "assistant",
      "type": "n8n-nodes-base.set",
      "position": [
        2848,
        -64
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "fddc112b-8a31-4098-b283-df9d0c7b0acf",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.aiProvider }}",
              "rightValue": "openai"
            }
          ]
        },
        "options": {}
      },
      "id": "af7314ea-60db-4873-838d-7a01dffc70ed",
      "name": "IfOpenAI",
      "type": "n8n-nodes-base.if",
      "position": [
        1088,
        544
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "content": "使用它來取得必要的局部變量，例如：對AI的指令，sessionId，以及來自前一個節點的所有輸入參數",
        "height": 260
      },
      "id": "db247d1d-8277-475b-98c8-4150326e0dfb",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        736,
        448
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Input parameters:\n1. sessionId: uuidv4\n2. threadId: nullable\n3. apiKey: string\n4. aiProvider: string\n5. model: string\n6. autoErrorFixing: boolean\n7. chatInput: string (users prompt)\n8. currentDbSchemaWithData: string (json architecture with data)",
        "height": 460,
        "width": 260,
        "color": 4
      },
      "id": "02dbf130-9e82-4d85-b743-2cb488fb0f46",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        368,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "e35fea46-5373-427b-b3fa-6fab56627bde",
              "operator": {
                "type": "number",
                "operation": "gte"
              },
              "leftValue": "={{ $node['GenerateErrorPrompt'].runIndex }}",
              "rightValue": 4
            }
          ]
        },
        "options": {}
      },
      "id": "e10c42db-8c9f-4052-8205-259b53ebdc3f",
      "name": "IsMaxAutoErrorReached",
      "type": "n8n-nodes-base.if",
      "position": [
        5616,
        112
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "1a3189fd-550e-4b1c-8720-65579fa39c44",
      "name": "OpenRouter Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "position": [
        3168,
        832
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "527cbbeb-e3a7-4fb5-aaae-fd2b8085de85",
              "name": "agentName",
              "type": "string",
              "value": "={{ 'AiDoubleCheck_' + $('localVariables').last().json.model }}"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "20960f49-d573-45e0-a3e0-f5e181a8ef66",
      "name": "AgentName",
      "type": "n8n-nodes-base.set",
      "position": [
        1376,
        -48
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "569f9268-5b51-4fac-9d8b-132de0b77ef0",
              "name": "output",
              "type": "string",
              "value": "={{ \n$if ( $('localVariables').last().json.aiProvider === 'openai', \n  $('OpenAIMainBrain').last().json.output,\n  $('OpenRouterAgent').last().json.output\n) \n}}"
            }
          ]
        },
        "options": {}
      },
      "id": "9f28f786-c999-4614-8d74-e67f945583e2",
      "name": "setOutputByProvider",
      "type": "n8n-nodes-base.set",
      "position": [
        4752,
        224
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "resource": "assistant",
        "assistantId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $('assistant').last().json.id }}"
        },
        "prompt": "define",
        "text": "={{ \n\n  $if($('GenerateErrorPrompt').isExecuted, \n\n    `## ERROR HANDLING MODE\\n\\n  ${$json.prompt}.`,\n\n    $if($('localVariables').last().json.currentDbSchemaWithData !== '[]', 'Current DB tables: ' + $('localVariables').last().json.currentDbSchemaWithData + '; ',\n'') + $('localVariables').last().json.chatInput + '. Prefix for tables: ' + $('localVariables').last().json.sessionId) \n\n}}",
        "memory": "threadId",
        "threadId": "={{ $ifEmpty($('localVariables').last().json.threadId, null) }}",
        "options": {}
      },
      "id": "c1c4bc98-9f7f-459b-9c1e-8ce1de98f24c",
      "name": "OpenAIMainBrain",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        3088,
        -64
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "562ef9d0-d7c1-43f3-8ceb-608b6576f4e2",
              "name": "message",
              "type": "string",
              "value": "={{ $json.output }}"
            },
            {
              "id": "8ede156c-df3f-4da3-87b2-696457147762",
              "name": "type",
              "type": "string",
              "value": "autoErrorFixingFalse"
            },
            {
              "id": "ed5a54d3-29b1-4034-9a1b-595831f25585",
              "name": "error",
              "type": "string",
              "value": "={{ $('Execute_AI_result').last().json.message }}"
            }
          ]
        },
        "options": {}
      },
      "id": "723fd28e-628e-417a-826c-2fd025a8a026",
      "name": "askUserHowToHandleError",
      "type": "n8n-nodes-base.set",
      "position": [
        5600,
        400
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "562ef9d0-d7c1-43f3-8ceb-608b6576f4e2",
              "name": "output",
              "type": "string",
              "value": "={{ $json.output }}"
            },
            {
              "id": "b9ddb8b4-56ab-4d7e-b3fa-2a72c5158d26",
              "name": "type",
              "type": "string",
              "value": "maxAutoErrorLimitReached"
            }
          ]
        },
        "options": {}
      },
      "id": "0e4af952-6e07-4cb0-a4ff-6705ed3bbfc0",
      "name": "maxAutoErrorLimitReached",
      "type": "n8n-nodes-base.set",
      "position": [
        5920,
        80
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "01f2a48f-2018-483c-a667-3c184ca9b169",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": "error"
            }
          ]
        },
        "options": {}
      },
      "id": "43a23e59-31f7-40fb-b911-9e3dd9bad912",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        1840,
        -48
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "30b2c62f-e7cf-4b8e-85ad-e0d6e4ae5094",
              "name": "type",
              "type": "string",
              "value": "wordsForUser"
            },
            {
              "id": "cca814df-e535-46c6-bd6e-aa780e8cf12e",
              "name": "message",
              "type": "string",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "id": "817ec035-7af7-41dd-b9f6-f51fff4b6c1d",
      "name": "wordsForUser1",
      "type": "n8n-nodes-base.set",
      "position": [
        3936,
        448
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "e52803c5-a6e2-4281-912f-a8c58867b9a8",
              "operator": {
                "type": "string",
                "operation": "notContains"
              },
              "leftValue": "={{ $json.output }}",
              "rightValue": "words_for_user"
            }
          ]
        },
        "options": {}
      },
      "id": "1347b643-7109-4148-86bd-89b540861b06",
      "name": "isExecutable",
      "type": "n8n-nodes-base.if",
      "position": [
        3616,
        240
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "resource": "assistant",
        "operation": "list"
      },
      "id": "73bc7418-b260-4c38-bc15-ec3ed50086df",
      "name": "getAssistantsList",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        1616,
        -48
      ],
      "typeVersion": 1.8,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "OpenAI has built-in assistant that handles chat history on their side. For open-router we should handle chat history on our side",
        "height": 260,
        "color": 5
      },
      "id": "84f8b40b-c563-4b28-a70c-c4c5b7323d1b",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1008,
        448
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Sometimes we can't answer with just code. This node is responsible for separation. If it is not a code for sandbox, than it will go to user as words.",
        "height": 260
      },
      "id": "efca8f7c-1115-4086-9b53-111574a00cee",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3552,
        128
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Error fixing loop will work only n times, defined in this node. It is done to prevent infinite loop",
        "height": 260
      },
      "id": "a793ec0d-97fc-49aa-8c2a-f3746946ed95",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        5552,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "If the user has selected automatic error fixing, debugging will be performed automatically, otherwise the system will ask the user for further instruction",
        "height": 280,
        "width": 220,
        "color": 2
      },
      "id": "d12ff01c-662d-4204-a1a7-1c91b122a5cd",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        5296,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT tablename\nFROM pg_catalog.pg_tables\nWHERE schemaname = 'public';",
        "options": {}
      },
      "id": "d004ab56-4a20-4a9d-ae2b-c899421af2af",
      "name": "get_all_tables",
      "type": "n8n-nodes-base.postgres",
      "position": [
        6000,
        1728
      ],
      "typeVersion": 2.6,
      "disabled": true
    },
    {
      "parameters": {},
      "id": "479c3308-8f3a-420a-8d2d-206ce6acb10b",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        7056,
        1584
      ],
      "typeVersion": 3.1,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const agentOutput = $(\"OpenRouterAgent\").all()[0]?.json?.output;\nconst commands = agentOutput.split(\"\\n\\n\");\nconst filteredCommands = commands.filter(\n  (command) =>\n    !command.includes(\"CREATE TABLE\") &&\n    !command.includes(\"INSERT INTO\"),\n);\nconst result = filteredCommands.join(\"\\n\\n\");\n\nreturn { result };\n"
      },
      "id": "a9832d33-f46e-4273-b7b3-0019bd33cc93",
      "name": "Extract Solution From Entire Query",
      "type": "n8n-nodes-base.code",
      "position": [
        6672,
        1408
      ],
      "typeVersion": 2,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  item.json.tableName = $('Loop Over Items').first().json.Tables_in_sql5776769;\n}\n\nreturn $input.all();"
      },
      "id": "def0dfb5-e863-4712-83bd-e5d00599ac4d",
      "name": "Add TableName ForEach",
      "type": "n8n-nodes-base.code",
      "position": [
        6880,
        1968
      ],
      "typeVersion": 2,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all().map((item) => item.json);\n\nlet result = {};\n\nitems.forEach((item) => {\n  const tableName = item.tableName;\n  delete item.tableName;\n\n  if (!result[tableName]) {\n    result[tableName] = [];\n  }\n\n  result[tableName].push(item);\n});\n\nreturn result;\n"
      },
      "id": "d0ef4902-a0dc-4ad4-a970-db60e4716935",
      "name": "Transform for HTML table",
      "type": "n8n-nodes-base.code",
      "position": [
        6688,
        1744
      ],
      "typeVersion": 2,
      "disabled": true
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "id": "d94e0429-8e30-429d-9cfc-c53422a557fd",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        6368,
        1728
      ],
      "typeVersion": 3,
      "disabled": true
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "mode": "name",
          "value": "{{ $json.Tables_in_sql5776769 }}"
        },
        "returnAll": true,
        "options": {}
      },
      "id": "c152627d-5e33-4dfc-a0bc-db1aceb1d0da",
      "name": "SelectAllData",
      "type": "n8n-nodes-base.postgres",
      "position": [
        6608,
        1968
      ],
      "typeVersion": 2.6,
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ \n\n  $if($('GenerateErrorPrompt').isExecuted, \n\n    `## ERROR HANDLING MODE\\n\\n  ${$json.prompt}.`,\n\n    $if($('localVariables').last().json.currentDbSchemaWithData !== '[]', 'Current DB tables: ' + $('localVariables').last().json.currentDbSchemaWithData + '; ',\n'') + $('localVariables').last().json.chatInput + '. Prefix for tables: ' + $('localVariables').last().json.sessionId) \n\n}}",
        "options": {
          "systemMessage": "={{ $('localVariables').last().json.instruction }}"
        }
      },
      "id": "39a21d61-816d-4414-8f0b-d87adda9f350",
      "name": "OpenRouterAgent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        3136,
        544
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "resource": "assistant",
        "operation": "create",
        "modelId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $('localVariables').last().json.model }}"
        },
        "name": "={{ $('AgentName').last().json.agentName }} ",
        "description": "will double check code directly in a playground",
        "instructions": "={{ $('localVariables').last().json.instruction }}",
        "options": {}
      },
      "id": "ec49bd8d-05cd-4438-bdb9-864a92580d5e",
      "name": "createOpenAiAssistant",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        2608,
        128
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5ee9645b-83f9-4f0e-9fd3-4a75121bee9a",
              "name": "instruction",
              "type": "string",
              "value": "=You are a senior PostgreSQL developer helping users solve PostgreSQL tasks in a PostgreSQL Playground environment. Follow these rules:\n\n1. Your response must always contain fully executable SQL code — with no markdown formatting. Never explain or comment in natural language.\n2. Assume that the first user prompt starts with an empty PostgreSQL Playground. You must begin with `CREATE TABLE` statements to build a realistic schema related to the task.\n3. The user will provide a table name prefix (e.g., session_abc199935). All table names must begin with that prefix and be enclosed in double quotes. Example: \"session_abc199935_users\".\n4. After creating tables, always include at least 3 rows of mock data using `INSERT INTO`.\n5. Finish each response with the actual query that solves the user’s request. This query must run on the created (or existing) tables and produce a verifiable result.\n6. Always separate the final query from setup using this comment: \"\"\"-- ACTUAL_SOLUTION\"\"\". Remember use only this comment for separation.\n7. If the task involves inspecting metadata (e.g., checking indexes, foreign keys, constraints), generate mock tables first (if none exist), and then use `information_schema` or `pg_catalog` views to provide introspective queries.\n8. This conversation may span multiple questions. In follow-up prompts, the schema and data already exist. You must use the current db tables as a foundation and ** create, alter, drop tables or data if the task requires it**.\n9. If no SQL can be generated (e.g., conversational input like \"hello\", \"explain\", or messy texts etc.), respond with: words_for_user: followed by a helpful or polite message — but generate no SQL.\n\nThe goal is to always output SQL code that users can copy and run directly in a PostgreSQL Playground to verify the result. In follow-ups, your SQL must adapt to the existing schema, expanding it or querying it intelligently as needed.\n"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "1caf5dec-7cbd-4cbf-9687-48d4aa33cd35",
      "name": "localVariables",
      "type": "n8n-nodes-base.set",
      "position": [
        816,
        544
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cfc317f9-d9fa-4026-9b2a-1cd4b13b87c6",
              "name": "query",
              "type": "string",
              "value": "={{ \n  $if($('localVariables').last().json.aiProvider === 'openai', \n    $('OpenAIMainBrain').last().json.output, \n    $('OpenRouterAgent').last().json.output\n  )\n}}"
            },
            {
              "id": "594046d1-9b2d-43cb-9609-04ee4f70364f",
              "name": "type",
              "type": "string",
              "value": "success"
            },
            {
              "id": "c6de1fb5-60a4-4050-a401-973139f42dfb",
              "name": "executionResult",
              "type": "string",
              "value": "={{ $json }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e4025036-da4e-4e6b-ad3e-97c5242aa861",
      "name": "executedSQLQuery",
      "type": "n8n-nodes-base.set",
      "position": [
        6512,
        448
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9cbea64a-8820-40df-9e88-f1d3ac5e5d06",
              "name": "type",
              "type": "string",
              "value": "error"
            },
            {
              "id": "d391b90b-79d7-45b4-b9f2-6bc4e45ab2c5",
              "name": "message",
              "type": "string",
              "value": "={{ $json.error }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ff239015-892a-4762-8de6-537396e1d1c3",
      "name": "issueOnOpenAiSide",
      "type": "n8n-nodes-base.set",
      "position": [
        2032,
        160
      ],
      "typeVersion": 3.4
    }
  ],
  "pinData": {},
  "connections": {
    "If": {
      "main": [
        [
          {
            "node": "isAssistantExistsCode",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "issueOnOpenAiSide",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IfError": {
      "main": [
        [
          {
            "node": "AutoErrorFixing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute_AI_result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IfOpenAI": {
      "main": [
        [
          {
            "node": "AgentName",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenRouterAgent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isOpenAI": {
      "main": [
        [
          {
            "node": "OpenAIMainBrain",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenRouterAgent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AgentName": {
      "main": [
        [
          {
            "node": "getAssistantsList",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "assistant": {
      "main": [
        [
          {
            "node": "OpenAIMainBrain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isExecutable": {
      "main": [
        [
          {
            "node": "setOutputByProvider",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "wordsForUser1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SelectAllData": {
      "main": [
        [
          {
            "node": "Add TableName ForEach",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "OpenRouterAgent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "get_all_tables": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "localVariables": {
      "main": [
        [
          {
            "node": "IfOpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AutoErrorFixing": {
      "main": [
        [
          {
            "node": "IsMaxAutoErrorReached",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "askUserHowToHandleError",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Extract Solution From Entire Query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Transform for HTML table",
            "type": "main",
            "index": 0
          },
          {
            "node": "SelectAllData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAIMainBrain": {
      "main": [
        [
          {
            "node": "isExecutable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouterAgent": {
      "main": [
        [
          {
            "node": "isExecutable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "executedSQLQuery": {
      "main": [
        []
      ]
    },
    "Execute_AI_result": {
      "main": [
        [
          {
            "node": "executedSQLQuery",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GenerateErrorPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getAssistantsList": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "isAssistantExists": {
      "main": [
        [
          {
            "node": "assistant",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "createOpenAiAssistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GenerateErrorPrompt": {
      "main": [
        [
          {
            "node": "isOpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setOutputByProvider": {
      "main": [
        [
          {
            "node": "IfError",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add TableName ForEach": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IsMaxAutoErrorReached": {
      "main": [
        [
          {
            "node": "maxAutoErrorLimitReached",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute_AI_result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "OpenRouterAgent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "createOpenAiAssistant": {
      "main": [
        [
          {
            "node": "assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isAssistantExistsCode": {
      "main": [
        [
          {
            "node": "isAssistantExists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform for HTML table": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "localVariables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Solution From Entire Query": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "eeba1735-59f4-4d6d-9432-ae5c8566a600",
  "meta": {
    "templateId": "6583",
    "instanceId": "032e4ed226280d4e257ee7757ba982c38bca62ab9c8cf7b63ba11226c2b5c6e1"
  },
  "id": "pkoAfyYdKVlOOtWa",
  "tags": []
}